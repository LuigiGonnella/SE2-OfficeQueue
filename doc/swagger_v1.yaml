openapi: 3.0.0
info:
  title: Office Queue API
  version: 1.0.0
  description: API for the project
servers:
  - url: http://localhost:8080/api/v1
    description: Local server
paths:
  /customers:
    get:
      summary: Get all customers
      responses:
        '200':
          description: A list of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
    post:
      summary: Create a new customer
      description: Create a new customer with the provided details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
                  
  /services:
    get:
      summary: Get all services
      responses:
        '200':
          description: A list of the services
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'

    post:
      summary: Create a new service
      description: Create a new service with the provided details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '201':
          description: Service created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'

  /services/id/{id}:
    get:
      summary: Get a specific service by its Id
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: number
          description: The Id of the service to retrieve
      responses:
        '200':
          description: A single service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'

  /services/name/{name}:
    get:
      summary: Get a specific service by its name
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
          description: The name of the service to retrieve
      responses:
        '200':
          description: A single service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'

    delete:
      summary: Delete a service
      description: Delete a service by its name
      parameters:
        - in: path
          name: name
          required: true
          schema:
            type: string
          description: The name of the service to delete
      responses:
        '204':
          description: Service deleted successfully
                  


  /tickets:
    get:
      summary: Get all tickets
      responses:
        '200':
          description: A list of tickets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
    post:
      summary: Create a new ticket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
      responses:
        '201':
          description: Ticket created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'

  /tickets/{ticket_id}:
    get:
      summary: Get a specific ticket by its ID
      parameters:
        - in: path
          name: ticket_id
          required: true
          schema:
            type: string
          description: The ID of the ticket to retrieve
      responses:
        '200':
          description: A single ticket
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ticket'
        #'400':
         # description: Invalid input data
          #content:
           # application/json:
            #  schema:
             #   $ref: "#/components/schemas/ErrorDTO"

  /tickets/service/{service_name}:
    get:
      summary: Get all the tickets by service name
      parameters:
        - in: path
          name: service_name
          required: true
          schema:
            type: string
          description: The name of the service to filter tickets
      responses:
        '200':
          description: A list of tickets for the specified service
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ticket'
        #'400':
         # description: Invalid input data
          #content:
           # application/json:
            #  schema:
             #   $ref: "#/components/schemas/ErrorDTO"
        
components:
  schemas:
    Customer:
      type: object
      properties:
        id:
          type: integer
          example: 1
        firstName:
          type: string
          example: "Mario"
        lastName:
          type: string
          example: "Rossi"
        phoneNumber:
          type: string
          example: "391234567890"
      required: [id, firstName, lastName]

    Service:
      type: object
      properties:
        id:
          type: integer
          example: 10
        name:
          type: string
          example: "Passport"
        description:
          type: string
          example: "Passport issuance service"
      required: [id, name]

    Ticket:
      type: object
      properties:
        id:
          type: number
          example: "TCK-0001"
        service:
          $ref: '#/components/schemas/Service'
        customer:
          $ref: '#/components/schemas/Customer'
        createdAt:
          type: string
          format: date-time
      required: [id, service, customer]

    ErrorDTO:
      type: object
      required:
        - code
      properties:
        code:
          type: number
        name:
          type: string
        message:
          type: string
      


