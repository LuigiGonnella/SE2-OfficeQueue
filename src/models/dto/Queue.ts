/* tslint:disable */
/* eslint-disable */
/**
 * Office Queue API
 * API for the project
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Ticket } from './Ticket';
import {
    TicketFromJSON,
    TicketFromJSONTyped,
    TicketToJSON,
    TicketToJSONTyped,
} from './Ticket';
import type { Counter } from './Counter';
import {
    CounterFromJSON,
    CounterFromJSONTyped,
    CounterToJSON,
    CounterToJSONTyped,
} from './Counter';

/**
 * 
 * @export
 * @interface Queue
 */
export interface Queue {
    /**
     * 
     * @type {number}
     * @memberof Queue
     */
    id: number;
    /**
     * 
     * @type {Date}
     * @memberof Queue
     */
    timestamp?: Date;
    /**
     * 
     * @type {Ticket}
     * @memberof Queue
     */
    ticket: Ticket;
    /**
     * 
     * @type {Counter}
     * @memberof Queue
     */
    counter?: Counter;
    /**
     * 
     * @type {Date}
     * @memberof Queue
     */
    servedAt?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof Queue
     */
    served?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof Queue
     */
    closeddAt?: Date;
}

/**
 * Check if a given object implements the Queue interface.
 */
export function instanceOfQueue(value: object): value is Queue {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('ticket' in value) || value['ticket'] === undefined) return false;
    return true;
}

export function QueueFromJSON(json: any): Queue {
    return QueueFromJSONTyped(json, false);
}

export function QueueFromJSONTyped(json: any, ignoreDiscriminator: boolean): Queue {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'timestamp': json['timestamp'] == null ? undefined : (new Date(json['timestamp'])),
        'ticket': TicketFromJSON(json['ticket']),
        'counter': json['counter'] == null ? undefined : CounterFromJSON(json['counter']),
        'servedAt': json['servedAt'] == null ? undefined : (new Date(json['servedAt'])),
        'served': json['served'] == null ? undefined : json['served'],
        'closeddAt': json['closedd_at'] == null ? undefined : (new Date(json['closedd_at'])),
    };
}

export function QueueToJSON(json: any): Queue {
    return QueueToJSONTyped(json, false);
}

export function QueueToJSONTyped(value?: Queue | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'timestamp': value['timestamp'] == null ? value['timestamp'] : value['timestamp'].toISOString(),
        'ticket': TicketToJSON(value['ticket']),
        'counter': CounterToJSON(value['counter']),
        'servedAt': value['servedAt'] == null ? value['servedAt'] : value['servedAt'].toISOString(),
        'served': value['served'],
        'closedd_at': value['closeddAt'] == null ? value['closeddAt'] : value['closeddAt'].toISOString(),
    };
}

