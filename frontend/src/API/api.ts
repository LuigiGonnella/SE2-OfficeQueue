/* tslint:disable */
/* eslint-disable */
/**
 * Office Queue API
 * API for the project
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

export interface Customer {
    'id': number;
    'firstName': string;
    'lastName': string;
    'phoneNumber'?: string;
}
export interface ErrorDTO {
    'code': number;
    'name'?: string;
    'message'?: string;
}
export interface Service {
    'id': number;
    'name': string;
    'description'?: string;
}
export interface Ticket {
    'id': number;
    'service': Service;
    'customer': Customer;
    'createdAt'?: string;
}

/**
 * DefaultApi - axios parameter creator
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all customers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new customer with the provided details
         * @summary Create a new customer
         * @param {Customer} customer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersPost: async (customer: Customer, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customer' is not null or undefined
            assertParamExists('customersPost', 'customer', customer)
            const localVarPath = `/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(customer, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all services
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a specific service by its Id
         * @param {number} id The Id of the service to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesIdIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('servicesIdIdGet', 'id', id)
            const localVarPath = `/services/id/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a service by its name
         * @summary Delete a service
         * @param {string} name The name of the service to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesNameNameDelete: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('servicesNameNameDelete', 'name', name)
            const localVarPath = `/services/name/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a specific service by its name
         * @param {string} name The name of the service to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesNameNameGet: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('servicesNameNameGet', 'name', name)
            const localVarPath = `/services/name/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new service with the provided details
         * @summary Create a new service
         * @param {Service} service 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesPost: async (service: Service, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'service' is not null or undefined
            assertParamExists('servicesPost', 'service', service)
            const localVarPath = `/services`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(service, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all tickets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/tickets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new ticket
         * @param {Ticket} ticket 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsPost: async (ticket: Ticket, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ticket' is not null or undefined
            assertParamExists('ticketsPost', 'ticket', ticket)
            const localVarPath = `/tickets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(ticket, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all the tickets by service name
         * @param {string} serviceName The name of the service to filter tickets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsServiceServiceNameGet: async (serviceName: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceName' is not null or undefined
            assertParamExists('ticketsServiceServiceNameGet', 'serviceName', serviceName)
            const localVarPath = `/tickets/service/{service_name}`
                .replace(`{${"service_name"}}`, encodeURIComponent(String(serviceName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a specific ticket by its ID
         * @param {string} ticketId The ID of the ticket to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketIdGet: async (ticketId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ticketId' is not null or undefined
            assertParamExists('ticketsTicketIdGet', 'ticketId', ticketId)
            const localVarPath = `/tickets/{ticket_id}`
                .replace(`{${"ticket_id"}}`, encodeURIComponent(String(ticketId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all customers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Customer>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.customersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new customer with the provided details
         * @summary Create a new customer
         * @param {Customer} customer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async customersPost(customer: Customer, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.customersPost(customer, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.customersPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all services
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Service>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a specific service by its Id
         * @param {number} id The Id of the service to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesIdIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Service>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesIdIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesIdIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a service by its name
         * @summary Delete a service
         * @param {string} name The name of the service to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesNameNameDelete(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesNameNameDelete(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesNameNameDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a specific service by its name
         * @param {string} name The name of the service to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesNameNameGet(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Service>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesNameNameGet(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesNameNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new service with the provided details
         * @summary Create a new service
         * @param {Service} service 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async servicesPost(service: Service, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Service>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.servicesPost(service, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.servicesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all tickets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Ticket>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.ticketsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new ticket
         * @param {Ticket} ticket 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsPost(ticket: Ticket, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ticket>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsPost(ticket, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.ticketsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get all the tickets by service name
         * @param {string} serviceName The name of the service to filter tickets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsServiceServiceNameGet(serviceName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Ticket>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsServiceServiceNameGet(serviceName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.ticketsServiceServiceNameGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a specific ticket by its ID
         * @param {string} ticketId The ID of the ticket to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ticketsTicketIdGet(ticketId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ticket>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ticketsTicketIdGet(ticketId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.ticketsTicketIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all customers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Customer>> {
            return localVarFp.customersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new customer with the provided details
         * @summary Create a new customer
         * @param {Customer} customer 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        customersPost(customer: Customer, options?: RawAxiosRequestConfig): AxiosPromise<Customer> {
            return localVarFp.customersPost(customer, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all services
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Service>> {
            return localVarFp.servicesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a specific service by its Id
         * @param {number} id The Id of the service to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesIdIdGet(id: number, options?: RawAxiosRequestConfig): AxiosPromise<Service> {
            return localVarFp.servicesIdIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a service by its name
         * @summary Delete a service
         * @param {string} name The name of the service to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesNameNameDelete(name: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.servicesNameNameDelete(name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a specific service by its name
         * @param {string} name The name of the service to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesNameNameGet(name: string, options?: RawAxiosRequestConfig): AxiosPromise<Service> {
            return localVarFp.servicesNameNameGet(name, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new service with the provided details
         * @summary Create a new service
         * @param {Service} service 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        servicesPost(service: Service, options?: RawAxiosRequestConfig): AxiosPromise<Service> {
            return localVarFp.servicesPost(service, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all tickets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Ticket>> {
            return localVarFp.ticketsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new ticket
         * @param {Ticket} ticket 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsPost(ticket: Ticket, options?: RawAxiosRequestConfig): AxiosPromise<Ticket> {
            return localVarFp.ticketsPost(ticket, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all the tickets by service name
         * @param {string} serviceName The name of the service to filter tickets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsServiceServiceNameGet(serviceName: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Ticket>> {
            return localVarFp.ticketsServiceServiceNameGet(serviceName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a specific ticket by its ID
         * @param {string} ticketId The ID of the ticket to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ticketsTicketIdGet(ticketId: string, options?: RawAxiosRequestConfig): AxiosPromise<Ticket> {
            return localVarFp.ticketsTicketIdGet(ticketId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Get all customers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public customersGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).customersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new customer with the provided details
     * @summary Create a new customer
     * @param {Customer} customer 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public customersPost(customer: Customer, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).customersPost(customer, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all services
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public servicesGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a specific service by its Id
     * @param {number} id The Id of the service to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public servicesIdIdGet(id: number, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesIdIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a service by its name
     * @summary Delete a service
     * @param {string} name The name of the service to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public servicesNameNameDelete(name: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesNameNameDelete(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a specific service by its name
     * @param {string} name The name of the service to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public servicesNameNameGet(name: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesNameNameGet(name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new service with the provided details
     * @summary Create a new service
     * @param {Service} service 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public servicesPost(service: Service, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).servicesPost(service, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all tickets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public ticketsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).ticketsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new ticket
     * @param {Ticket} ticket 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public ticketsPost(ticket: Ticket, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).ticketsPost(ticket, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all the tickets by service name
     * @param {string} serviceName The name of the service to filter tickets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public ticketsServiceServiceNameGet(serviceName: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).ticketsServiceServiceNameGet(serviceName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a specific ticket by its ID
     * @param {string} ticketId The ID of the ticket to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    public ticketsTicketIdGet(ticketId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).ticketsTicketIdGet(ticketId, options).then((request) => request(this.axios, this.basePath));
    }
}



